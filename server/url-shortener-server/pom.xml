<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>dev.naspo</groupId>
	<artifactId>url-shortener-server</artifactId>
	<version>1.0.0</version>
	<name>url-shortener-server</name>
	<description>The backend for my URL Shortener project.</description>

	<properties>
		<java.version>21</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
<!--		MySQL and JOOQ Dependencies -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.33</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq</artifactId>
			<version>3.19.7</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-meta</artifactId>
			<version>3.19.7</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-codegen</artifactId>
			<version>3.19.7</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
<!--			Maven properties plugin to read env.properties file (used for JOOQ code gen plugin)-->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
					<execution>
						<phase>initialize</phase>
						<goals>
							<goal>read-project-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>env.properties</file>
							</files>
						</configuration>
					</execution>
				</executions>
			</plugin>
<!--			JOOQ codegen plugin -->
			<plugin>
				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<version>3.19.7</version>

				<executions>
					<execution>
						<id>jooq-codegen</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>

				<configuration>
					<!-- Configure the database connection here -->
					<jdbc>
						<driver>com.mysql.cj.jdbc.Driver</driver>
						<url>jdbc:mysql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_NAME}</url>
						<user>${DATABASE_USER}</user>
						<password>${DATABASE_PASSWORD}</password>
					</jdbc>

					<generator>
						<!-- The default code generator. You can override this one, to generate your own code style.
                             Supported generators:
                             - org.jooq.codegen.JavaGenerator
                             - org.jooq.codegen.KotlinGenerator
                             - org.jooq.codegen.ScalaGenerator
                             Defaults to org.jooq.codegen.JavaGenerator -->
						<name>org.jooq.codegen.JavaGenerator</name>

						<database>
							<!-- The database type. The format here is:
                                 org.jooq.meta.[database].[database]Database -->
							<name>org.jooq.meta.mysql.MySQLDatabase</name>

							<!-- The database schema (or in the absence of schema support, in your RDBMS this
                                 can be the owner, user, database name) to be generated -->
							<inputSchema>${DATABASE_NAME}</inputSchema>

							<!-- All elements that are generated from your schema
                                 (A Java regular expression. Use the pipe to separate several expressions)
                                 Watch out for case-sensitivity. Depending on your database, this might be important! -->
							<includes>.*</includes>

							<!-- All elements that are excluded from your schema
                                 (A Java regular expression. Use the pipe to separate several expressions).
                                 Excludes match before includes, i.e. excludes have a higher priority -->
							<excludes></excludes>
						</database>

						<target>
							<!-- The destination package of your generated classes (within the destination directory) -->
							<packageName>dev.naspo.urlshortenerserver.database.generated</packageName>

							<!-- The destination directory of your generated classes. Using Maven directory layout here -->
							<directory>src/main/java</directory>
						</target>
					</generator>
				</configuration>
			</plugin>
<!--		Maven surefire test plugin (specifying environment variables for smooth testing)-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.2.5</version>
				<configuration>
					<environmentVariables>
						<DATABASE_HOST>${DATABASE_HOST}</DATABASE_HOST>
						<DATABASE_PORT>${DATABASE_PORT}</DATABASE_PORT>
						<DATABASE_USER>${DATABASE_USER}</DATABASE_USER>
						<DATABASE_PASSWORD>${DATABASE_PASSWORD}</DATABASE_PASSWORD>
						<DATABASE_NAME>${DATABASE_NAME}</DATABASE_NAME>
						<DATABASE_RUN_ENV>${RUN_ENV}</DATABASE_RUN_ENV>
					</environmentVariables>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
